# -*- coding: utf-8 -*-
"""listas_iterables1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1330ycYQCggxLl1Bilfd8Z9HV8BHUSleX
"""

lista1= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print (lista1)

# Recorremos y evaluamos la lista
nueva_lista= []
for elemento in lista1:
  if elemento > 5:
    nueva_lista.append(elemento)

print(f"la lista con los valores mayores a 5 es:{nueva_lista}")

lista2=[1,-2, 3, -4, 5, -6, 7, -8, 9, -10]
acumulador = 0
for elemento in lista2 :
  if elemento > 0:
    acumulador = acumulador + elemento
    #acumulador += elemento
    print(f" el valor de la suma acumulada es:{acumulador}")



mi_diccionario = { 'nombre': 'juan', 'edad': 30, }
print(mi_diccionario)
nuevos_datos = {'edad': 31, 'ciudad': 'Madrid'}
mi_diccionario.update(nuevos_datos)
print(f"diccionario sin actualizado {mi_diccionario}")

# resolvente
import math
x = int ( input( "ingrese el valor de x"))
y = math. sqrt (x)
print (y)

import math

a = int ( input( "ingrese el valor de a"))
b = int ( input( "ingrese el valor de b"))
c = int ( input( "ingrese el valor de c"))

if a == 0:
  print("el valor de a no puede ser cero, ingrese otro numero")
else:
  discriminante = (b**2) - 4*a*c # Fixed assignment operator

  if discriminante < 0:
    print (f" la funcion ingresada no tiene raices reales")
  elif discriminante == 0:
    raiz = -b / (2*a)
    print (f"la funcion tiene una solucion: {raiz}") # Corrected indentation of print
  else: # Corrected indentation of else
    raiz1 = (-b + math.sqrt(discriminante)) / (2*a)
    raiz2 = (-b - math.sqrt(discriminante)) / (2*a)
    if raiz1>raiz2:
      x2 = raiz1
      x1 = raiz2 # Corrected indentation
    else:
      x1 = raiz1
      x2 = raiz2
    print ("la raiz 1 es:", x1)
    print ("la raiz 2 es:", x2)